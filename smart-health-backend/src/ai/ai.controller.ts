//ai.controller.ts
import { Controller, Post, Body, Req, 
    InternalServerErrorException } from '@nestjs/common';
import axios from 'axios';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Metric } from 'src/metrics/metrics.schema';

@Controller('ai')
export class AiController {
    private readonly openRouterUrl = 'https://openrouter.ai/api/v1/chat/completions';
    
    constructor(
        @InjectModel('Metric') private metricModel: Model<Metric>
    ) {}

    @Post('chat')
    async chat(@Body() body: { message: string }, @Req() req) {
        const user = req.session.user;
        console.log("in ai/chat:", user);
        const { message } = body;

        if (!user) {
            throw new InternalServerErrorException('User not authenticated');
        }

        const metrics = await this.metricModel.findOne({ userId: user._id })
                                                .sort({ createdAt: -1 });
        
        const userInfoLines = [`Name: ${user.name}`,
                                `Email: ${user.email}`
                            ];
        
        if (metrics) { 
            userInfoLines.push(
                `Sex: ${metrics.sex ?? 'N/A'}`,
                `BMI: ${metrics.bmi ?? 'N/A'}`,
                `Diabetes Risk: ${metrics.diabetesProbability ?? 'N/A'}`,
                `Diabetes Probability: ${metrics.diabetesRiskCategory ?? 'N/A'}`,
                `Heart Disease Risk: ${metrics.heartProbability ?? 'N/A'}`,
                `Heart Probability: ${metrics.heartRiskCategory ?? 'N/A'}`,
                `Stroke Risk: ${metrics.strokeProbability ?? 'N/A'}`,
                `Stroke Probability: ${metrics.strokeRiskCategory ?? 'N/A'}`
            );
        } 
        else {
            userInfoLines.push('Health metrics not found.');
        }

        const userInfo = userInfoLines.join('\n');
        
        const systemPrompt = `You are HealthBot, an intelligent assistant for health advice.
            Provide personalized answers using any available user health info. Health info is
            generated by Machine Learning models using user's input.
            Do not repeat user data unless needed.`;

        const chatPrompt = [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: `${userInfo}\n\nQuestion: ${message}` },
        ];

        console.log('Prompt being sent to OpenRouter:\n', JSON.stringify(chatPrompt, null, 2));

        try {
            const response = await axios.post(
                this.openRouterUrl,
                {
                    model: 'mistralai/mistral-7b-instruct', 
                    messages: chatPrompt,
                },
                {
                    headers: {
                        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
                        'Content-Type': 'application/json',
                        'HTTP-Referer': 'http://localhost:3000',
                        'X-Title': 'Smart Health Monitor Chatbot',
                    },
                }
            );

            const reply = response.data.choices[0]?.message?.content || 'No response';
            return { reply };
        } 
        catch (error) {
            console.error('OpenRouter full error:', JSON.stringify(error, null, 2));
            if (error.response) {
                console.error('Status:', error.response.status);
                console.error('Headers:', error.response.headers);
                console.error('Data:', error.response.data);
            } 
            else {
                console.error('Message:', error.message);
            }
            throw new InternalServerErrorException('AI chat failed');
        }
    }
}

/* Models to try--
openai/gpt-3.5-turbo ///
openai/gpt-4 ///
mistralai/mistral-7b-instruct
meta-llama/llama-3-8b-instruct
'openchat/openchat-7b'
'nousresearch/nous-capybara-7b'
'huggingfaceh4/zephyr-7b-beta'
*/
